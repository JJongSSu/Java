객체
특징과 기능을 가지고 있는 것
속성(필드) + 동작(메소드)

package : 바이트 코드, target 코드

클래스 : 객체의 설계도
클래스 이름은 대문자로 시작
클래스 이름 = 생성자 이름
생성자는 반환 유형이 없다
final class -> 수정불가 
필드+메소드+생성자(+getter/setter)
1. 필드 
	클래스 안에 있는 속성(int, String 등으로 타입 지정)
2. 생성자 
	new 연산자로 객체 생성할 때 호출되어 객체의 초기화를 담당하는 요소
	클래스 이름과 동일하게 만듬
	Car myCar = new Car();
3. 메소드(선언부+블록)
	문장들의 집합 -> 조건문, 반복문
	for each : 배열 순차 접근할 때 사용

public class = 파일 이름
한 개의 파일에 여러 개의 클래스가 들어갈 수 있다
이 중 public class만 파일 이름하고 같으면 된다
하나의 파일에는 public class가 하나만 존재
public class는 다른 package에서도 불러올 수 있음
class는 해당 package에서만 사용 가능

상속 -> 확장해서 사용하는 느낌

상수 = 리터럴
값이 변하지 않는 것

true, false
1. 예약어
2. 분리형 리터럴

들여쓰기 : tab
내어쓰기 : shift + tab

access modifier : 접근 수정자, 접근 식별자
- public : 누구나 사용 가능
- protected : 같은 패키지에 있지 않아도 상속관계에 있으면 사용
- default(기본, 아무것도 쓰지 않음) : 같은 패키지에 있는 클래스들만 사용가능
	ex) class 
- private : 불러오기 안됨, 내부에서만 사용하고 싶을 때


<객체지향언어>
class 정의 -> 객체 생성 -> 객체들 간의 상호작용 -> 문제 해결
- 상속성
- 캡슐화, 추상화 : class(필드+메소드 정의)
- 다형성

stack			heap
참조변수(4바이트)	객체
-> 다른 객체가 생겨 참조변수가 새로 만들어진 객체와 연결되면
	기존 객체와 연결이 끊기고 시간이 지나면 알아서 삭제(C++은 직접 삭제해줘야됨)
-> 기존 객체를 유지하고 싶으면 참조변수를 한개 더 만들면 됨











