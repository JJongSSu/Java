인스턴스 = class에서 만든 객체
필드 : 인스턴스, 정적(static) 
static -> 메모리에 상주

1개 program : code, static, stack, heap
프로그램 실행하면 code와 static은 메모리에 올려놓고
우리가 입력한 코드들은 stack과 heap에 생성
static -> 메소드를 먼저 저장, 메모리에 올라감
stack -> String str, 참조변수, 지역변수, 인스턴스 변수
heap -> "현대자동차", 객체

객체는 'new 생성자'로 만든다

정적멤버는 객체 생성하기 전에도 사용가능하기 때문에 인스턴스 변수를 사용할 수 없다
정적멤버는 선언되면 미리 메모리에 올라감
인스턴스 변수는 객체가 만들어 졌을 때 생성되는데 객체는 나중에 만들어지기 때문에 정적멤버에서 사용할 수 없다

정적변수는 이탈리어 어(글자가 누워있음)로 표시됨
	ex) parseInt 등

this : 생성될 객체 자신을 가리키는 예약어
	생성자와 메소드의 매개변수 이름이 필드와 동일한 경우 사용

자료형 : 기본형(byte, 분리형...), 참조형(클래스 형/타입, 인터페이스...)

public static final : 상수 변수 정의, 전체 대문자로 작성
	프로그램 끝날 때까지 값을 변경하지 못하게 만들 때 사용

패키지 : 연관된 클래스, 인터페이스, 예외, 에러, 열거형의 모음
	클래스를 체계적으로 관리하기 위해 사용
	패키지가 다르면 이름이 같은 클래스라도 다른 클래스로 인식

access modifier : 접근 수정자, 접근 식별자
- public : 누구나 사용 가능, getter/setter
- protected : 같은 패키지, 상속관계에 있으면 사용
	protected <return type><member name>
- default(기본, 아무것도 쓰지 않음) : 같은 패키지에 있는 클래스들만 사용가능
	void run() {}
- private : 불러오기 안됨, 내부에서만 사용하고 싶을 때
	private <return type><member name>

생성자 -> public, default


상속
OOP 특징
기존 클래스의 유용한 부분을 재사용으로 생산성 증대
테스트된 코드 사용으로 신뢰성 향상
한방향으로만 작용
상속을 통해서 기존 구현된 메소드를 덮어 씌울 수 있다

super class(=parent class, base, existing) : 상속해주는 클래스

↓	추가, 중첩, 재정의

sub class(=child class, derived, extended)

final 메소드 -> 재정의 불가

추상 클래스 
추상 메소드 가지고 있음 -> 객체 생성을 못함
-> 상속하기 위해 만듬 -> 상속받으면 추상 메소드를 모두 만들어야 함 
-> 클래스에 abstract 사용하여 추상 메소드 모두 만들지 않고도 사용 가능

인터페이스 : 상호작용하는 접점




















